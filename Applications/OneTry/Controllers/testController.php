<?php
/**
 * Created by Aurelien
 * Date: 01/07/13
 * Time: 21:53
 */

namespace Applications\OneTry\Controllers;


use Applications\OneTry\I18n\I18n;
use Applications\OneTry\Services\FormBuilder\ExempleFormBuilder;
use Library\ApplicationComponent\Body\Backbone;
use Library\Cache;
use Library\Helper\Filter;

class testController extends Backbone {

    public function indexAction(){
        $this->skin()->addTitle('Simple Titre');

        //echo $this->app()->i18n()->translate(I18n::FIRST_EXEMPLE).'<br/>';
        //echo $this->app()->i18n()->translate(I18n::SECOND_EXEMPLE).'<br/>';
        //echo $this->app()->i18n()->translate(I18n::THIRD_EXEMPLE_WITH_PARAM, array('"Ceci est un parametre"')).'<br/>';

        //$this->skin()->js()->setJSVar('RED', 'rouge');

        //$formBuilder = new ExempleFormBuilder();
        //$formBuilder->build();

        //$form = $formBuilder->form();
        //echo $form->createView();

        //var_dump(getenv('ENV'));
        //var_dump($this->config()->vars());

        //Filter::int('<<<<zare....'));

        //$client = new \Library\WebService\RestClient('http://localhost:8080/experimental/onetry/ws/HelloServices/sayHello');
        //echo json_decode($client->post(array('name' => 'Aurel'))['content']);

        /*
        $this->cache()->setFile('exemple');
        if(!$this->cache()->load()){
            echo 'je cache';
            $example = array('tr' => 'test cache');

            $this->cache()->addVar('test', $example);
            $this->cache()->addVar('test2', 'coucou');
            $this->cache()->save(3);
        }
        var_dump($this->cache()->getVar('test'));
        */

        //exit;

        /*
        $test = $this->pdo()->mysql()->prepare('SHOW TABLES');
        $test->execute();
        $tables = $test->fetchAll(\PDO::FETCH_NUM);

        foreach ($tables as $table) {
            $stmt = $this->pdo()->mysql()->prepare(sprintf("DESCRIBE %s", $table[0]));
            $stmt->execute();
            $result[$table[0]] = $stmt->fetchAll(\PDO::FETCH_OBJ);
        }

        var_dump($result);
*/
        $path = SERVER_ROOT.'Applications'.DIRECTORY_SEPARATOR.$this->appName().DIRECTORY_SEPARATOR.'Models'.DIRECTORY_SEPARATOR.'DAO'.DIRECTORY_SEPARATOR;
        if(!is_dir($path)){
            mkdir($path);
        }

        $tableList = $this->pdo()->mysql()->listTable();
        foreach ($tableList as $table) {
            $filePath = $path.'e'.ucfirst($table[0]).'.php';
            if(file_exists($filePath)) unlink($filePath);
            $file = fopen($filePath,'a+');
            $input = "<?php\r\n";
            $input .= "/**\r\n";
            $input .= " * Generated by eXtal\r\n";
            $input .= " */\r\n";
            $input .= "\r\n";
            $input .= "namespace Library\ApplicationComponent\Database;\r\n";
            $input .= "\r\n";
            $input .= "class eUser implements DaoInterface {\r\n";
            $input .= "\r\n";

            $describe = $this->pdo()->mysql()->describeTable($table[0]);
            foreach ($describe as $field) {
                $input .= "\tconst ".strtoupper($field->Field)." = '".strtolower($field->Field)."';\r\n";
            }
            $input .= "\r\n";
            foreach ($describe as $field) {
                $input .= "\t".'private $_'.strtolower($field->Field).";\r\n";
            }
            $input .= "\r\n";
            foreach ($describe as $field) {
                $input .= "\tpublic function ".strtolower($field->Field)."(){\r\n";
                $input .= "\t\t".'return $this->_'.strtolower($field->Field).";\r\n";
                $input .= "\t}\r\n";
                $input .= "\r\n";
                $input .= "\tpublic function set".ucfirst($field->Field)."($".strtolower($field->Field)."){\r\n";
                $input .= "\t\t".'$this->_'.strtolower($field->Field)." = $".strtolower($field->Field).";\r\n";
                $input .= "\t}\r\n";
                $input .= "\r\n";
            }

            $input .= "\tpublic function __construct(){\r\n";
            $input .= "\t\t// TODO: Implement toString() method.\r\n";
            $input .= "\t}\r\n";
            $input .= "\r\n";
            $input .= "\tpublic function toString(){\r\n";
            $input .= "\t\t// TODO: Implement toString() method.\r\n";
            $input .= "\t}\r\n";
            $input .= "\r\n";
            $input .= "\tpublic static function doSelect(".'$sql'."){\r\n";
            $input .= "\t\t// TODO: Implement toString() method.\r\n";
            $input .= "\t}\r\n";
            $input .= "\r\n";
            $input .= "\tpublic static function retrieveByPk(".'$id'."){\r\n";
            $input .= "\t\t// TODO: Implement toString() method.\r\n";
            $input .= "\t}\r\n";
            $input .= "\r\n";
            $input .= "\tpublic function save(){\r\n";
            $input .= "\t\t// TODO: Implement toString() method.\r\n";
            $input .= "\t}\r\n";
            $input .= "\r\n";
            $input .= "\tpublic function delete(){\r\n";
            $input .= "\t\t// TODO: Implement toString() method.\r\n";
            $input .= "\t}\r\n";

            $input .= "}";
            fputs($file, $input);
            fclose($file);

        }
    }
}