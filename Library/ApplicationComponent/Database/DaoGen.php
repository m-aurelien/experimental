<?php
/**
 * Created by Aurelien
 * Date: 03/08/13
 * Time: 23:45
 */

namespace Library\ApplicationComponent\Database;


use Library\Application;
use Library\ApplicationComponent\ApplicationComponent;
use Library\ApplicationComponent\Log\Logger;

class DaoGen extends ApplicationComponent {
    private $_path;
    private $_basePath;

    public function __construct(Application $app){
        parent::__construct($app);

        $this->logger()->trace("DaoGen", "Initiate DaoGen", Logger::PERIOD_VOID);

        $this->_path = SERVER_ROOT.'Applications'.DIRECTORY_SEPARATOR.$this->appName().DIRECTORY_SEPARATOR.'Models'.DIRECTORY_SEPARATOR.'DAO'.DIRECTORY_SEPARATOR;
        if(!is_dir($this->_path)){
            $this->logger()->trace("DaoGen", "Create DAO folder", Logger::PERIOD_VOID);

            mkdir($this->_path);
        }

        $this->_basePath = $this->_path.'Base'.DIRECTORY_SEPARATOR;
        if(!is_dir($this->_basePath)){
            $this->logger()->trace("DaoGen", "Create Base folder", Logger::PERIOD_VOID);

            mkdir($this->_basePath);
        }
    }

    public function generate(){
        try{
            $tableList = $this->pdo()->mysql()->listTable();
            foreach ($tableList as $table) {
                $this->_baseGenAndCreate($table);
            }
            foreach ($tableList as $table) {
                $this->_extendGenAndCreate($table);
            }

            $this->logger()->trace("DaoGen", "Files was generated with success", Logger::PERIOD_VOID);
        }catch (\Exception $e){
            $this->logger()->trace("DaoGen", "An error was occurred", Logger::PERIOD_VOID);
        }
    }

    private function _baseGenAndCreate($table){
        $this->logger()->trace("DaoGen", "Generate base".ucfirst($table[0]).".php", Logger::PERIOD_VOID);

        $filePath = $this->_basePath.'base'.ucfirst($table[0]).'.php';
        if(file_exists($filePath)) unlink($filePath);
        $file = fopen($filePath,'a+');

        $describe = $this->pdo()->mysql()->describeTable($table[0]);

        $input = $this->_headerGen();
        $input .= "\n";
        $input .= $this->_baseHeaderGen($table);
        $input .= "\n";
        $input .= $this->_baseConstGen($describe);
        $input .= "\n";
        $input .= $this->_baseAttrGen($describe);
        $input .= "\n";
        $input .= $this->_baseConstructGen();
        $input .= "\n";
        $input .= $this->_baseAccessorGen($describe);
        $input .= "\n";
        $input .= $this->_baseToStringGen();
        $input .= "\n";
        $input .= $this->_baseLoadGen();
        $input .= "\n";
        $input .= $this->_baseRetrieveGen();
        $input .= "\n";
        $input .= $this->_baseSaveGen();
        $input .= "\n";
        $input .= $this->_baseDelGen();
        $input .= "\n";
        $input .= $this->_footerGen();

        fputs($file, $input);
        fclose($file);
    }

    private function _extendGenAndCreate($table){
        $filePath = $this->_path.'e'.ucfirst($table[0]).'.php';
        if(!file_exists($filePath)){
            $this->logger()->trace("DaoGen", "Generate e".ucfirst($table[0]).".php", Logger::PERIOD_VOID);

            $file = fopen($filePath,'a+');

            $input = $this->_headerGen();
            $input .= "\n";
            $input .= $this->_extHeaderGen($table);
            $input .= "\n";
            $input .= $this->_footerGen();

            fputs($file, $input);
            fclose($file);
        }
    }

    private function _headerGen(){
        $input  = "<?php\n";
        $input .= "/**\n";
        $input .= " * Generated by eXtal\n";
        $input .= " * Date: ".date('d/m/y')."\n";
        $input .= " * Time: ".date('h:i')."\n";
        $input .= " */\n";
        return $input;
    }

    private function _extHeaderGen($table){
        $input  = "namespace Applications\\".$this->appName()."\\Models\\DAO;\n";
        $input .= "\n";
        $input .= "use Application\\".$this->appName()."\\Models\\DAO\\Base\\base".ucfirst($table[0]).";\n";
        $input .= "\n";
        $input .= "class e".ucfirst($table[0])." extends base".ucfirst($table[0])." {\n";
        return $input;
    }

    private function _baseHeaderGen($table){
        $input  = "namespace Application\\".$this->appName()."\\Models\\DAO\\Base;\n";
        $input .= "\n";
        $input .= "class base".ucfirst($table[0])." {\n";
        return $input;
    }

    private function _baseConstGen($describe){
        $input  = "\t// **********************\n";
        $input .= "\t// CONST DECLARATION\n";
        $input .= "\t// **********************\n";
        foreach ($describe as $field) {
            $input .= "\tconst ".strtoupper($field->Field)." = '".strtolower($field->Field)."';\n";
        }
        return $input;
    }

    private function _baseAttrGen($describe){
        $input  = "\t// **********************\n";
        $input .= "\t// ATTRIBUTE DECLARATION\n";
        $input .= "\t// **********************\n";
        foreach ($describe as $field) {
            $input .= "\t".'protected $_'.strtolower($field->Field).";\n";
        }
        return $input;
    }

    private function _baseConstructGen(){
        $input  = "\t// **********************\n";
        $input .= "\t// CONSTRUCTOR METHOD\n";
        $input .= "\t// **********************\n";
        $input .= "\tpublic function __construct(){\n";
        $input .= "\t\t// TODO: Implement toString() method.\n";
        $input .= "\t}\n";
        return $input;
    }

    private function _baseAccessorGen($describe){
        $input  = "\t// **********************\n";
        $input .= "\t// ACCESSOR METHODS\n";
        $input .= "\t// **********************\n";
        foreach ($describe as $field) {
            $input .= "\tpublic function ".strtolower($field->Field)."(){\n";
            $input .= "\t\t".'return $this->_'.strtolower($field->Field).";\n";
            $input .= "\t}\n";
            $input .= "\n";
            $input .= "\tpublic function set".ucfirst($field->Field)."($".strtolower($field->Field)."){\n";
            $input .= "\t\t".'$this->_'.strtolower($field->Field)." = $".strtolower($field->Field).";\n";
            $input .= "\t}\n";
            $input .= "\n";
        }
        return $input;
    }

    private function _baseToStringGen(){
        $input  = "\t// **********************\n";
        $input .= "\t// TO STRING METHOD\n";
        $input .= "\t// **********************\n";
        $input .= "\tpublic function toString(){\n";
        $input .= "\t\t// TODO: Implement toString() method.\n";
        $input .= "\t}\n";
        return $input;
    }

    private function _baseLoadGen(){
        $input  = "\t// **********************\n";
        $input .= "\t// SELECT METHOD / LOAD ALL\n";
        $input .= "\t// **********************\n";
        $input .= "\tpublic static function doSelect(".'$sql'."){\n";
        $input .= "\t\t// TODO: Implement toString() method.\n";
        $input .= "\t}\n";
        return $input;
    }

    private function _baseRetrieveGen(){
        $input  = "\t// **********************\n";
        $input .= "\t// RETRIEVE BY PRIMARY KEY\n";
        $input .= "\t// **********************\n";
        $input .= "\tpublic static function retrieveByPk(".'$id'."){\n";
        $input .= "\t\t// TODO: Implement toString() method.\n";
        $input .= "\t}\n";
        return $input;
    }

    private function _baseSaveGen(){
        $input  = "\t// **********************\n";
        $input .= "\t// SAVE\n";
        $input .= "\t// **********************\n";
        $input .= "\tpublic function save(){\n";
        $input .= "\t\t// TODO: Implement toString() method.\n";
        $input .= "\t}\n";
        return $input;
    }

    private function _baseDelGen(){
        $input  = "\t// **********************\n";
        $input .= "\t// DELETE\n";
        $input .= "\t// **********************\n";
        $input .= "\tpublic function delete(){\n";
        $input .= "\t\t// TODO: Implement toString() method.\n";
        $input .= "\t}\n";
        return $input;
    }

    private function _footerGen(){
        $input = "}";
        return $input;
    }
}